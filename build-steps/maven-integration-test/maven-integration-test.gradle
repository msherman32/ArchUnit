import java.nio.file.Files

def repositoryUrls = [
        tng     : [
                snapshots: 'https://nexus.int.tngtech.com/content/repositories/snapshots',
                releases : 'https://nexus.int.tngtech.com/content/repositories/releases'
        ],
        sonatype: [
                snapshots: 'https://oss.sonatype.org/content/repositories/snapshots',
                releases : 'https://oss.sonatype.org/content/repositories/releases'
        ]
]
def createRepositoriesTag = { repoUrls ->
    """
    <repositories>
        <repository>
            <id>snapshots</id>
            <name>Snapshots</name>
            <url>${repoUrls.snapshots}</url>
        </repository>
        <repository>
            <id>releases</id>
            <name>Releases</name>
            <url>${repoUrls.releases}</url>
        </repository>
    </repositories>
"""
}

def getRepoUrls = {
    def repoUrls = repositoryUrls.get(it)
    assert repoUrls: "The configured -PmavenRepos=${it} don't exist"
    repoUrls
}

File mavenTestRootDir = rootProject.file('archunit-maven-test')
File mavenSrc = new File(mavenTestRootDir, 'src')
File mavenTarget = new File(mavenTestRootDir, 'target')
File mavenPomTemplate = new File(mavenTestRootDir, 'pom.xml.template')
File mavenPom = new File(mavenTestRootDir, 'pom.xml')
File verificationTestPath = new File(mavenTestRootDir, 'verification/TestResultTest.java')
File verificationResultOriginPath = new File(mavenTestRootDir, 'target/surefire-reports')
File verificationResultArchivePath = new File(mavenTestRootDir, 'verification-results')

task initializeMavenTest {
    doLast {
        verificationResultArchivePath.with {
            deleteDir()
            assert mkdir(): "Couldn't create directory ${delegate}"
        }
    }
}

def addMavenTest = { config ->
    String prepareMavenTest = "prepareMavenTest${config.suffix}"
    String executeRules = "executeRules${config.suffix}"
    String verifyRules = "verifyRules${config.suffix}"
    String cleanUpMavenTest = "cleanUpMavenTest${config.suffix}"
    String runMavenTest = "runMavenTest${config.suffix}"

    return {
        tasks.create(name: prepareMavenTest, dependsOn: initializeMavenTest) {
            doLast {
                mavenPom.delete()
                Files.copy(mavenPomTemplate.toPath(), mavenPom.toPath())

                def repositories = project.hasProperty('mavenRepos') ?
                        createRepositoriesTag(getRepoUrls(project.getProperty('mavenRepos'))) :
                        ''

                mavenPom.text = mavenPom.text
                                        .replace('#{archunit.version}', "${version}")
                                        .replace('#{repositories}', repositories)
                                        .replace('#{javaVersion}', config.javaVersion)
                                        .replace('#{extraCompilerArgs}', config.extraCompilerArgs ?: '')

                copy {
                    from new File(project(':archunit-example').projectDir, 'src')
                    into mavenSrc
                }
                copy {
                    from verificationTestPath
                    into new File(mavenSrc, 'test/java')
                }
            }
        }

        def mavenExec = { closure ->
            return {
                workingDir mavenTestRootDir

                if (config.jdkPath) {
                    environment JAVA_HOME: config.jdkPath
                }

                delegate.with(closure)
            }
        }

        tasks.create(name: executeRules, type: Exec, dependsOn: prepareMavenTest).configure mavenExec {
            commandLine './mvnw', 'clean', 'test', '-P', 'execute-rules'
        }

        tasks.create(name: verifyRules, type: Exec, dependsOn: executeRules).configure mavenExec {
            commandLine './mvnw', 'surefire:test', '-P', 'verify-rules'
        }

        tasks.create(name: cleanUpMavenTest) {
            doFirst {
                copy {
                    from verificationResultOriginPath
                    include '**/*.xml'
                    into new File(verificationResultArchivePath, "${config.suffix}")
                }
            }
            doLast {
                mavenPom.delete()
                mavenSrc.deleteDir()
                mavenTarget.deleteDir()
            }
        }

        // Run cleanUp even if task fails
        [tasks[prepareMavenTest], tasks[verifyRules], tasks[executeRules]]*.finalizedBy tasks[cleanUpMavenTest]

        tasks.create(name: runMavenTest, dependsOn: [prepareMavenTest, executeRules, verifyRules, cleanUpMavenTest])

        def executeRulesTask = tasks[executeRules]
        releaseProjects.with {
            [install, uploadArchives].each { executeRulesTask.mustRunAfter it }
        }
    }
}

def javaConfigs = [
        [suffix: "java7", javaVersion: "1.7", jdkProp: "java7Home"],
        [suffix: "java8", javaVersion: "1.8", jdkProp: "java8Home"],
        [suffix: "java9", javaVersion: "9", jdkProp: "java9Home", extraCompilerArgs:
                """<compilerArgs>
                            <arg>--add-modules</arg>
                            <arg>java.xml.ws.annotation</arg>
                        </compilerArgs>"""],
        [suffix: "java10", javaVersion: "10", jdkProp: "java10Home", extraCompilerArgs:
                """<compilerArgs>
                            <arg>--add-modules</arg>
                            <arg>java.xml.ws.annotation</arg>
                        </compilerArgs>"""]
]

javaConfigs = javaConfigs.findAll { project.hasProperty(it.jdkProp) }
                         .collect { config -> config + [jdkPath: project[config.jdkProp]] }

javaConfigs = javaConfigs ?: [[suffix: 'java7', javaVersion: '1.7']]
javaConfigs.each { config ->
    project.with(addMavenTest(config))
}

Task findTask(String name) {
    tasks[name]
}

def suffixes = javaConfigs*.suffix.sort()
[suffixes, suffixes.tail()].transpose().each { twoConsecutiveSuffixes ->
    tasks["prepareMavenTest${twoConsecutiveSuffixes[1]}"].mustRunAfter(tasks["cleanUpMavenTest${twoConsecutiveSuffixes[0]}"])
}

task runMavenTest
tasks.findAll { it.name ==~ /^runMavenTest.+/ }.each { runMavenTest.dependsOn it }