ext.moduleName = 'com.tngtech.archunit.junit4'

dependencies {
    compile project(path: ':archunit', configuration: 'shadow')
    compile project(path: ':archunit-junit', configuration: 'shadow')
    compile dependency.guava
    compile dependency.junit
    compile dependency.slf4j

    testCompile dependency.log4j_api
    testCompile dependency.log4j_core
    testCompile dependency.log4j_slf4j
    testCompile dependency.mockito
    testCompile dependency.assertj
    testCompile(dependency.assertj_guava) {
        exclude module: 'assertj-core'
        exclude module: 'guava'
    }
    testCompile project(path: ':archunit', configuration: 'tests')
}

configureSlowTestsFor this

shadowJar {
    dependencies {
        exclude(project(':archunit'))
        exclude(dependency(dependency.junit))
        exclude(dependency(dependency.slf4j))
        exclude(dependency(dependency.hamcrest)) // Shadow doesn't respect transitive excludes :-(
    }
}

// These files are already relocated into archunit.jar, so they're transitively available
task removeDuplicateThirdParty(type: Jar, dependsOn: shadowJar) {
    exclude "${thirdPartyRelocationPackage.replace('.', '/')}/**"

    File tempPath = tempJar(jar.archivePath)
    from zipTree(shadowJar.archivePath)
    archiveName tempPath.name

    doLast {
        assert shadowJar.archivePath.delete()
        assert tempPath.renameTo(shadowJar.archivePath)
    }
}
finishArchive.dependsOn removeDuplicateThirdParty

def configureDependencies = { pom ->
    pom.dependencies.removeAll {
        it.scope != 'compile' || !(it.artifactId in ['archunit', 'junit'])
    }
    pom.dependencies.find { it.artifactId == 'archunit' }.classifier = null
}
install.repositories.mavenInstaller.pom.whenConfigured configureDependencies
uploadArchives.repositories.mavenDeployer.pom.whenConfigured configureDependencies